{"version":3,"sources":["hoc/Auxiliary.js","components/Layout/Layout.js","containers/Tickers/Table/Table.js","components/UI/Modal/Modal.js","containers/Tickers/Tickers.js","App.js","serviceWorker.js","index.js"],"names":["Auxiliary","props","children","layout","react_default","a","createElement","hoc_Auxiliary","table","tickerdata","data","map","ticker","key","id","rank","className","onClick","modal","name","symbol","circulating_supply","total_supply","max_supply","sort","quotes","USD","Date","last_updated","market_cap","percent_change_1h","percent_change_7d","percent_change_24h","volume_24h","hideModal","Tickers","state","metadata","start","page","showModal","selectedTicker","getRecords","axios","get","params","_this","then","response","setState","Object","values","fetchRecordsByPagination","direction","console","log","startFrom","history","push","pathname","sortBy","parameter","b","localStorage","setItem","setModalData","currentTicker","modalHandler","this","setInterval","_this2","Table_Table","num_cryptocurrencies","timestamp","Route","path","exact","component","Modal_Modal","Component","withRouter","App","BrowserRouter","basename","process","Layout","containers_Tickers_Tickers","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48ae9132.chunk.js","sourcesContent":["const Auxiliary = ( props ) => props.children\r\n\r\nexport default Auxiliary;","import React from 'react';\r\nimport Auxiliary from '../../hoc/Auxiliary';\r\n\r\nconst layout = (props) => (\r\n    <Auxiliary>\r\n        <main>\r\n            {props.children}\r\n        </main>\r\n    </Auxiliary>\r\n);\r\n\r\nexport default layout;","import React from 'react';\r\nimport Auxiliary from '../../../hoc/Auxiliary';\r\nimport './Table.css';\r\n\r\nconst table = (props) => {\r\n\r\n    const tickerdata = props.data.map(ticker => {\r\n        return (\r\n            <tr key={ticker.id}>\r\n                <td>{ticker.rank}</td>\r\n                <td className=\"tickername\" onClick={() => props.modal(ticker)}>{ticker.name}</td>\r\n                <td>{ticker.symbol}</td>\r\n                <td>{ticker.circulating_supply || 'N/A'}</td>\r\n                <td>{ticker.total_supply || 'N/A'}</td>\r\n                <td>{ticker.max_supply || 'N/A'}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <Auxiliary>\r\n            <table id=\"example\" className=\"table table-striped table-bordered dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th onClick={() => props.sort('rank')}>Rank</th>\r\n                        <th onClick={() => props.sort('name')}>Name</th>\r\n                        <th onClick={() => props.sort('symbol')}>Symbol</th>\r\n                        <th onClick={() => props.sort('circulating_supply')}>Circulating Supply ($)</th>\r\n                        <th onClick={() => props.sort('total_supply')}>Total Supply ($)</th>\r\n                        <th onClick={() => props.sort('max_supply')}>Max Supply ($)</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tickerdata}\r\n                </tbody>\r\n            </table>            \r\n        </Auxiliary>\r\n    );\r\n}\r\n\r\nexport default table;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nconst modal = (props) => {\r\n\r\n    return (\r\n        <div className=\"Modal\" >\r\n            <div className=\"Modal-dialog\">\r\n                <div className=\"Modal-content\">\r\n                    <h3>{props.data.name}</h3>\r\n                    <hr />\r\n                    <div className=\"clearfix\">\r\n                        <ul className=\"ticker-list\">\r\n                            <li>Symbol: <span className=\"float-right detail-span\">{props.data.symbol}</span></li>\r\n                            <li>Rank: <span className=\"float-right detail-span\">{props.data.rank}</span></li>\r\n                            <li>Circulating Supply: <span className=\"float-right detail-span\">{props.data.circulating_supply || 'NA'}</span></li>\r\n                            <li>Max Supply: <span className=\"float-right detail-span\">{props.data.quotes.USD.max_supply || 'NA'}</span></li>\r\n                            <li>Total Supply: <span className=\"float-right detail-span\">{props.data.total_supply || 'NA'}</span></li>\r\n                            <li>Last Updated: <span className=\"float-right detail-span\">{Date(props.data.last_updated) || 'NA'}</span></li>\r\n                            <li>Market Cap: <span className=\"float-right detail-span\">{props.data.quotes.USD.market_cap || 'NA'}</span></li>\r\n                            <li>Percent Change(1h): <span className=\"float-right detail-span\">{props.data.quotes.USD.percent_change_1h || 'NA'}</span></li>\r\n                            <li>Percent Change(7d): <span className=\"float-right detail-span\">{props.data.quotes.USD.percent_change_7d || 'NA'}</span></li>\r\n                            <li>Percent Change(7d): <span className=\"float-right detail-span\">{props.data.quotes.USD.percent_change_24h || 'NA'}</span></li>\r\n                            <li>Volume(24h): <span className=\"float-right detail-span\">{props.data.quotes.USD.volume_24h || 'NA'}</span></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div >\r\n                        <button className=\"btn btn-info float-right\" onClick={() => props.hideModal()}>Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default modal;","import React, { Component } from 'react';\r\nimport { Route, withRouter } from 'react-router-dom';\r\nimport Auxiliary from '../../hoc/Auxiliary';\r\nimport Table from './Table/Table';\r\nimport './Tickers.css';\r\nimport axios from 'axios';\r\nimport Modal from './../../components/UI/Modal/Modal';\r\n\r\n\r\nclass Tickers extends Component {\r\n\r\n    state = {\r\n        tickerdata: [],\r\n        metadata: [],\r\n        start: 1,\r\n        page: 1,\r\n        showModal: false,\r\n        selectedTicker: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRecords();\r\n        setInterval(this.getRecords, 1000 * 60);\r\n    }\r\n\r\n    // Fetch Initial Records\r\n    getRecords = () => {\r\n        axios.get('https://api.coinmarketcap.com/v2/ticker/', {\r\n            params: {\r\n                start: this.state.start > 100 ? this.state.start : null\r\n            }\r\n        }).then(response => {\r\n            this.setState({\r\n                tickerdata: Object.values(response.data.data),\r\n                metadata: response.data.metadata\r\n            });\r\n        });\r\n    };\r\n\r\n    // Fetch Records on using Pagination (Next/Previous)\r\n    fetchRecordsByPagination = (direction) => {\r\n        console.log(this.props);\r\n        let page = this.state.page;\r\n        let startFrom = this.state.start;\r\n        if (direction === 'prev') {\r\n            startFrom = startFrom - 100\r\n            page = page - 1;\r\n        } else {\r\n            startFrom = startFrom + 100;\r\n            page = page + 1;\r\n        }\r\n        axios.get('https://api.coinmarketcap.com/v2/ticker/', {\r\n            params: {\r\n                start: startFrom\r\n            }\r\n        }).then(response => {\r\n            this.setState({\r\n                tickerdata: Object.values(response.data.data),\r\n                metadata: response.data.metadata,\r\n                page: page,\r\n                start: startFrom\r\n            });\r\n            this.props.history.push({ pathname: '/tickers/page/' + page })\r\n        });\r\n    }\r\n\r\n    sortBy = (parameter) => {\r\n        let data = this.state.tickerdata;\r\n        data.sort((a,b) => (a[parameter] > b[parameter]) ? 1 : ((b[parameter] > a[parameter]) ? -1 : 0));\r\n        localStorage.setItem('Sort By', parameter);\r\n        this.setState({tickerdata: data});\r\n    }\r\n\r\n    setModalData = (currentTicker) => {\r\n        this.setState({showModal: true, selectedTicker: currentTicker});        \r\n    }\r\n\r\n    modalHandler = () => {\r\n        this.setState({showModal:false})\r\n    }\r\n\r\n    render() {\r\n        const table = () => <Table className=\"clearfix\" modal={this.setModalData} sort={this.sortBy} data={this.state.tickerdata} />;\r\n        return (\r\n            <Auxiliary>\r\n                <div className=\"clearfix metainfo\">\r\n                    <p className=\"stats\">Cryptocurrencies: <span className=\"count\">{this.state.metadata.num_cryptocurrencies}</span></p>\r\n                    <p className=\"stats\">Last Updated: <span className=\"count\">{Date(this.state.metadata.timestamp)}</span></p>\r\n                </div>\r\n                <div className=\"clearfix pagination float-right\">\r\n                    {this.state.start > 100 ?\r\n                        (\r\n                            <button className=\"btn btn-info float-right action-btn\" onClick={() => this.fetchRecordsByPagination('prev')} >Previous 100</button>\r\n                        ) : null\r\n\r\n                    }\r\n                    <button className=\"btn btn-success float-right action-btn\" onClick={() => this.fetchRecordsByPagination('next')} >Next 100</button>\r\n                </div>\r\n                <Route path=\"/\" exact component={table} />\r\n                <Route path=\"/tickers/page/:id\" component={table} />\r\n                {this.state.showModal ? <Modal hideModal={this.modalHandler} data={this.state.selectedTicker} /> : null }                \r\n            </Auxiliary>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Tickers);","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Layout from './components/Layout/Layout';\r\nimport Tickers from './containers/Tickers/Tickers';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <div className=\"container-fluid\">\r\n          <Layout>\r\n            <Tickers />\r\n          </Layout>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/bootstrap/dist/js/bootstrap.min';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}